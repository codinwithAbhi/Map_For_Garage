{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\FIND_BIKE_STATION\\\\find-bike-frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MapComponent from \"../components/LeafletMap\";\nimport \"../styles/home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [garages, setGarages] = useState([]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async pos => {\n        const {\n          latitude,\n          longitude\n        } = pos.coords;\n        const userCoords = [latitude, longitude];\n        setUserLocation(userCoords);\n\n        // Fetch garages from Google Places API\n        const nearbyGarages = await fetchNearbyGarages(latitude, longitude);\n        //   setGarages(\n        //     nearbyGarages.map((place) => ({\n        //       position: [place.geometry.location.lat, place.geometry.location.lng],\n        //       popup: place.name,\n        //     }))\n        //   );\n      }, error => console.error(\"Error getting location:\", error), {\n        enableHighAccuracy: true\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  const fetchNearbyGarages = async (lat, lng) => {\n    const dummyGarages = [{\n      id: 1,\n      position: [lat + 0.002, lng + 0.002],\n      name: \"Elite Auto Repair\",\n      address: \"123 Main Street, Downtown\",\n      rating: 4.5,\n      distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\n      // Random distance\n      openingHours: \"9:00 AM - 6:00 PM\",\n      openDays: \"Monday - Saturday\",\n      image: \"https://source.unsplash.com/300x200/?garage,car-repair\"\n    }, {\n      id: 2,\n      position: [lat - 0.002, lng - 0.002],\n      name: \"Speedy Garage Services\",\n      address: \"456 Elm Street, Midtown\",\n      rating: 4.2,\n      distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\n      openingHours: \"8:00 AM - 7:00 PM\",\n      openDays: \"Monday - Sunday\",\n      image: \"https://source.unsplash.com/300x200/?mechanic,workshop\"\n    }, {\n      id: 3,\n      position: [lat + 0.001, lng - 0.002],\n      name: \"Reliable Auto Fix\",\n      address: \"789 Oak Avenue, Suburbs\",\n      rating: 4.8,\n      distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\n      openingHours: \"10:00 AM - 5:00 PM\",\n      openDays: \"Tuesday - Sunday\",\n      image: \"https://source.unsplash.com/300x200/?auto-shop,car\"\n    }, {\n      id: 4,\n      position: [lat - 0.003, lng + 0.001],\n      name: \"Precision Auto Works\",\n      address: \"159 Pine Road, Industrial Area\",\n      rating: 4.7,\n      distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\n      openingHours: \"7:30 AM - 6:30 PM\",\n      openDays: \"Monday - Friday\",\n      image: \"https://source.unsplash.com/300x200/?garage,mechanic\"\n    }, {\n      id: 5,\n      position: [lat + 0.0025, lng - 0.003],\n      name: \"Fast Track Auto Care\",\n      address: \"246 Maple Lane, Near City Park\",\n      rating: 4.3,\n      distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\n      openingHours: \"6:00 AM - 9:00 PM\",\n      openDays: \"Monday - Sunday\",\n      image: \"https://source.unsplash.com/300x200/?car-service,repair\"\n    }];\n    setGarages(dummyGarages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-wrapper\",\n      children: userLocation ? /*#__PURE__*/_jsxDEV(MapComponent, {\n        center: userLocation,\n        userLocation: userLocation,\n        markers: garages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading location...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n// const fetchNearbyGarages = async (lat, lng) => {\n//     const API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\"; // Replace with your API Key\n//     const radius = 1000; // 1 km search radius\n//     const type = \"car_repair\"; // Fetches garages\n\n//     const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${API_KEY}`;\n\n//     try {\n//       const response = await fetch(url);\n//       const data = await response.json();\n\n//       return data.results.map((place) => ({\n//         id: place.place_id,\n//         position: [place.geometry.location.lat, place.geometry.location.lng],\n//         name: place.name,\n//         address: place.vicinity,\n//         rating: place.rating || \"No rating\",\n//         distance: getDistance(lat, lng, place.geometry.location.lat, place.geometry.location.lng),\n//         photo: place.photos\n//           ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&photoreference=${place.photos[0].photo_reference}&key=${API_KEY}`\n//           : \"https://via.placeholder.com/200\", // Default image if no photo\n//       }));\n//     } catch (error) {\n//       console.error(\"Error fetching garages:\", error);\n//       return [];\n//     }\n//   };\n\n// const getDistance = (lat1, lon1, lat2, lon2) => {\n//     const toRad = (x) => (x * Math.PI) / 180;\n//     const R = 6371; // Radius of Earth in km\n//     const dLat = toRad(lat2 - lat1);\n//     const dLon = toRad(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     return (R * c).toFixed(2) + \" km\";\n//   };\n_s(Home, \"yaKarncgKh3TD/Zi+U9OXq6L2fs=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","MapComponent","jsxDEV","_jsxDEV","Home","_s","userLocation","setUserLocation","garages","setGarages","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","coords","userCoords","nearbyGarages","fetchNearbyGarages","error","console","enableHighAccuracy","lat","lng","dummyGarages","id","position","name","address","rating","distance","Math","random","toFixed","openingHours","openDays","image","className","children","center","markers","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects/FIND_BIKE_STATION/find-bike-frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MapComponent from \"../components/LeafletMap\";\r\nimport \"../styles/home.css\";\r\n\r\nexport default function Home() {\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [garages, setGarages] = useState([]); \r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (pos) => {\r\n          const { latitude, longitude } = pos.coords;\r\n          const userCoords = [latitude, longitude];\r\n          setUserLocation(userCoords);\r\n\r\n          // Fetch garages from Google Places API\r\n          const nearbyGarages = await fetchNearbyGarages(latitude, longitude);\r\n        //   setGarages(\r\n        //     nearbyGarages.map((place) => ({\r\n        //       position: [place.geometry.location.lat, place.geometry.location.lng],\r\n        //       popup: place.name,\r\n        //     }))\r\n        //   );\r\n        },\r\n        (error) => console.error(\"Error getting location:\", error),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }, []);\r\n\r\n  const fetchNearbyGarages = async (lat, lng) => {\r\n    const dummyGarages = [\r\n      {\r\n        id: 1,\r\n        position: [lat + 0.002, lng + 0.002],\r\n        name: \"Elite Auto Repair\",\r\n        address: \"123 Main Street, Downtown\",\r\n        rating: 4.5,\r\n        distance: (Math.random() * 5 + 1).toFixed(2) + \" km\", // Random distance\r\n        openingHours: \"9:00 AM - 6:00 PM\",\r\n        openDays: \"Monday - Saturday\",\r\n        image: \"https://source.unsplash.com/300x200/?garage,car-repair\",\r\n      },\r\n      {\r\n        id: 2,\r\n        position: [lat - 0.002, lng - 0.002],\r\n        name: \"Speedy Garage Services\",\r\n        address: \"456 Elm Street, Midtown\",\r\n        rating: 4.2,\r\n        distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\r\n        openingHours: \"8:00 AM - 7:00 PM\",\r\n        openDays: \"Monday - Sunday\",\r\n        image: \"https://source.unsplash.com/300x200/?mechanic,workshop\",\r\n      },\r\n      {\r\n        id: 3,\r\n        position: [lat + 0.001, lng - 0.002],\r\n        name: \"Reliable Auto Fix\",\r\n        address: \"789 Oak Avenue, Suburbs\",\r\n        rating: 4.8,\r\n        distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\r\n        openingHours: \"10:00 AM - 5:00 PM\",\r\n        openDays: \"Tuesday - Sunday\",\r\n        image: \"https://source.unsplash.com/300x200/?auto-shop,car\",\r\n      },\r\n      {\r\n        id: 4,\r\n        position: [lat - 0.003, lng + 0.001],\r\n        name: \"Precision Auto Works\",\r\n        address: \"159 Pine Road, Industrial Area\",\r\n        rating: 4.7,\r\n        distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\r\n        openingHours: \"7:30 AM - 6:30 PM\",\r\n        openDays: \"Monday - Friday\",\r\n        image: \"https://source.unsplash.com/300x200/?garage,mechanic\",\r\n      },\r\n      {\r\n        id: 5,\r\n        position: [lat + 0.0025, lng - 0.003],\r\n        name: \"Fast Track Auto Care\",\r\n        address: \"246 Maple Lane, Near City Park\",\r\n        rating: 4.3,\r\n        distance: (Math.random() * 5 + 1).toFixed(2) + \" km\",\r\n        openingHours: \"6:00 AM - 9:00 PM\",\r\n        openDays: \"Monday - Sunday\",\r\n        image: \"https://source.unsplash.com/300x200/?car-service,repair\",\r\n      },\r\n    ];\r\n  \r\n    setGarages(dummyGarages);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"map-wrapper\">\r\n        {userLocation ? (\r\n          <MapComponent center={userLocation} userLocation={userLocation} markers={garages} />\r\n        ) : (\r\n          <p>Loading location...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const fetchNearbyGarages = async (lat, lng) => {\r\n//     const API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\"; // Replace with your API Key\r\n//     const radius = 1000; // 1 km search radius\r\n//     const type = \"car_repair\"; // Fetches garages\r\n  \r\n//     const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${API_KEY}`;\r\n  \r\n//     try {\r\n//       const response = await fetch(url);\r\n//       const data = await response.json();\r\n  \r\n//       return data.results.map((place) => ({\r\n//         id: place.place_id,\r\n//         position: [place.geometry.location.lat, place.geometry.location.lng],\r\n//         name: place.name,\r\n//         address: place.vicinity,\r\n//         rating: place.rating || \"No rating\",\r\n//         distance: getDistance(lat, lng, place.geometry.location.lat, place.geometry.location.lng),\r\n//         photo: place.photos\r\n//           ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&photoreference=${place.photos[0].photo_reference}&key=${API_KEY}`\r\n//           : \"https://via.placeholder.com/200\", // Default image if no photo\r\n//       }));\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching garages:\", error);\r\n//       return [];\r\n//     }\r\n//   };\r\n\r\n// const getDistance = (lat1, lon1, lat2, lon2) => {\r\n//     const toRad = (x) => (x * Math.PI) / 180;\r\n//     const R = 6371; // Radius of Earth in km\r\n//     const dLat = toRad(lat2 - lat1);\r\n//     const dLon = toRad(lon2 - lon1);\r\n//     const a =\r\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n//       Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n//     return (R * c).toFixed(2) + \" km\";\r\n//   };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}